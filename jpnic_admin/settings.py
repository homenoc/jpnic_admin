"""
Django settings for jpnic_admin project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full result of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import saml2

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from jpnic_admin.templatetags import extra

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'false').lower() == 'true'

# ENABLE SAML
ENABLE_SAML = os.environ.get('ENABLE_SAML', 'false').lower() == 'true'

ALLOWED_HOSTS = os.getenv("ALLOWED_HOST", "*").split(' ')
CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS', 'http://localhost:8000').split(' ')

APP_NAME = 'JPNIC資源情報管理システム'
SITE_TITLE = os.environ.get('SITE_TITLE', 'JPNIC資源情報管理システム')
SITE_HEADER = os.environ.get('SITE_HEADER', 'JPNIC資源情報管理システム')

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'djangosaml2',
    "jpnic_admin",
    "jpnic_admin.log",
    "jpnic_admin.info",
    "jpnic_admin.config",
    "jpnic_admin.assignment",
    "jpnic_admin.person",
    "mathfilters",
    "widget_tweaks",
    "debug_toolbar",
    "drf_yasg",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

# SAML
if ENABLE_SAML:
    MIDDLEWARE.append('djangosaml2.middleware.SamlSessionMiddleware')
    AUTHENTICATION_BACKENDS.append("djangosaml2.backends.Saml2Backend")
    SAML_SESSION_COOKIE_NAME = 'saml_session'
    SAML_SESSION_COOKIE_SAMESITE = 'Lax'
    SAML_IGNORE_LOGOUT_ERRORS = True
    SAML_DJANGO_USER_MAIN_ATTRIBUTE = "username"
    SAML_CREATE_UNKNOWN_USER = True
    SAML_ATTRIBUTE_MAPPING = {
        "name": ("username",),
        "emailAddress": ("email",),
        "givenName": ("first_name",),
        "surname": ("last_name",),
    }

    SAML_CONFIG = {
        "entityid": os.environ.get('SAML_ENTITY_ID', 'xxx'),
        "service": {
            "sp": {
                "endpoints": {
                    "assertion_consumer_service": [
                        (os.environ.get('SAML_LOGIN_URL', 'xxx'),
                         saml2.BINDING_HTTP_POST),
                    ],
                    "single_logout_service": [
                        (os.environ.get('SAML_LOGOUT_URL', 'xxx'),
                         saml2.BINDING_HTTP_POST),
                    ],
                },
                "want_response_signed": os.environ.get('SAML_ENABLE_RESPONSE_SIGNED', 'true').lower() == 'true',
                "allow_unsolicited": True
            },
        },
        "metadata": {
            "local": [
                os.path.join(BASE_DIR, os.environ.get('SAML_METADATA_PATH', 'saml/develop.xml')),
            ]
        },
        # "debug": 1,
    }

ROOT_URLCONF = 'jpnic_admin.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "builtins": ["jpnic_admin.templatetags.extra"],
        },
    },
]

WSGI_APPLICATION = "jpnic_admin.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    # "default": {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    # }
    "default": {
        "ENGINE": "django_tidb" if os.environ.get('DATABASE_TIDB_MODE', 'false').lower() == 'true' else "django.db.backends.mysql",
        "NAME": os.getenv("DATABASE_NAME", "jpnic-admin"),
        "USER": os.getenv("DATABASE_USER", "jpnic-admin"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD", ""),
        "HOST": os.getenv("DATABASE_HOST", "localhost"),
        "PORT": os.getenv("DATABASE_PORT", 3306),
        "OPTIONS": {
            "charset": "utf8mb4",
        },
    }
}

# Logging
LOGGING = {
    "version": 1,
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    },
    "handlers": {
        "slack_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django_slack.log.SlackExceptionHandler",
            'template': os.path.join(BASE_DIR, 'jpnic_admin/templates/slack/message.slack')
        },
    },
    "loggers": {
        "django": {
            "handlers": ["slack_admins"],
            "propagate": True,
            "level": "INFO",
        },
        "": {
            "handlers": ["slack_admins"],
            "level": "DEBUG",
        },
    },
}

SLACK_ENDPOINT_URL = (
    os.getenv("SLACK_ENDPOINT_URL", "")
)

# Debug
if DEBUG:
    import socket

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1", ]
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

CSRF_TRUSTED_ORIGINS = []

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LANGUAGE_CODE = "ja-jp"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'jpnic_admin/static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

CA_PATH = os.getenv("CA_PATH", "/rootcacert_r3.cer")
JPNIC_BASE_URL = "https://iphostmaster.nic.ad.jp"

LOG_SLACK_WEBHOOK_URL = os.getenv("LOG_SLACK_WEBHOOK_URL", "")
SLACK_WEBHOOK_URL = os.getenv("SLACK_WEBHOOK_URL", "")

DOMAIN_URL = os.getenv("DOMAIN_URL", "http://localhost")

ORG_FILTER = os.environ.get('ORGS_FILTER', '').split(' ')
LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "/"

# Slack通知
NOTICE_MONTH = "*"
NOTICE_DAY = 1
NOTICE_HOUR = 9
NOTICE_MINUTE = 0

# BETA機能
BETA = False
